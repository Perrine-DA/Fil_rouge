import streamlit as st
import pandas as pd
import io
import numpy as np
import commun as cn
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
from scipy.stats import spearmanr

df = cn.df
dfx = cn.dfx

st.header("üìà "+cn.title+ " - Analyses", divider='rainbow')

partie1 = "Exploration des donn√©es"
partie2 = "Analyses m√©tier"
partie3 = "Corr√©lations entre variables"

pages=[":beginner: "+partie1, ":bar_chart: "+partie2, "üî¢"+partie3]
page=st.sidebar.radio("Aller vers", pages)


if page == pages[0] : 
    st.subheader(partie1, divider='blue')    
    
    st.markdown("### Le **DataFrame brute issue de ORDE**")
    with st.expander("Forme du DataFrame"):
         st.write(" (nombre d'enregistrements, nombre de variables) = ", dfx.shape)
    
    with st.expander('Description statistiques du DataFrame'):
         st.dataframe(dfx.describe())   
    
    
    with st.expander("Analyse et traitement des valeurs manquantes") :
         st.subheader('Taux des valeurs manquantes par colonne')
         st.dataframe(round(dfx.isna().sum()/len(dfx)*100))
         st.write("""Cas des 100% de NA - Nous constatons que les colonnes :
         Stockage batterie, D√©stockage batterie, Eolien terrestre,
         Eolien offshore et Column 30 
         ont 100% de valeurs manquantes. Nous d√©cidons de supprimer ces colonnes pour le reste de notre analyse.""")
    
         st.write("""Cas des TCO et TCH (colonnes taux de couverture et de charge) - TCO et TCH pr√©sentent des taux\
         de valeurs manquantes sup√©rieurs √† 87%. 
         Cependant les valeurs des colonnes TCO et TCH sont toutes pr√©sentes pour l‚Äôann√©e 2020.
         Nous les conservons dans un premier temps pour faire une pr√©diction avec ces features suppl√©mentaires si \
         le temps nous le permet.""")
    
         st.write("""Cas de la production Nucl√©aire - 
         Nous avons not√© que le taux de valeurs manquantes de la fili√®re nucl√©aire est de 42%, cependant cette \
         fili√®re est si importante dans le mix √©nerg√©tique fran√ßais que nous la gardons. Par ailleurs, nous \
         constatons que les valeurs manquantes sont pr√©sentes dans quelques r√©gions seulement : Pays de la Loire,\
         Bourgogne-Franche-Comt√©, IDF, PACA, Bretagne""")
         st.write("""Cas de la fili√®re Pompage - 
         Concernant la fili√®re de pompage, les valeurs sont manquantes √©galement pour quelques r√©gions seulement ce qui peut \
         expliquer le fort taux de valeurs manquantes : Pays-de-la-Loire, IDF, Centre-Val-de-Loire, Normandie, \
         Hauts-de-France,Nouvelle-Aquitaine  """)
         st.write("Nous d√©cidons de garder cette colonne qui repr√©sente une variable importante de la r√©gulation \
         de l‚Äôoffre et la demande en √©lectricit√©.")
    
    st.markdown("### Le **DataFrame de travail**")
    if st.checkbox("Afficher les 30 derniers enregistrements"):
        st.dataframe(df.tail(30), column_config={'_index':st.column_config.NumberColumn(format="%d"), 'annee':st.column_config.NumberColumn(format="%d")})
        
    st.markdown('''  
    Pour obtenir ce Dataframe, nous avons group√© les valeurs par jour, puis, nous y avons joint les donn√©es :  
    - temp√©ratures quotidiennes r√©gionales,  
    - les pannes,
    - les tarifs de bases de l'√©lectricit√© des particuliers,  
    - la moyenne des tarifs heures creuses et heures pleines des particuliers''')                    
                
    st.divider()
    
    st.markdown("### *Informations* sur les **Colonnes**")
    with st.expander("$ \Large Afficher $") :
        buffer = io.StringIO()
        df.info(verbose=True, buf=buffer)
        st.text(buffer.getvalue())
    
    st.divider()

    st.markdown("### Statistiques des productions fran√ßaises (MWh)")
    with st.expander("$ \Large Afficher $") :    
        prod_cols = ['thermique', 'nucleaire', 'eolien', 'solaire',\
                     'hydraulique', 'pompage', 'bioenergies','ech.physiques']        
        st.dataframe(df[prod_cols].describe().round(0))
               
    st.markdown("### Statistiques de consommations fran√ßaises (MWh)")
    with st.expander("$ \Large Afficher $") :                          
        st.dataframe(df[['consommation']].describe().round(0))
             
    st.markdown('''**Remarque :** Les valeurs de consommations et de production dans la source de donn√©es d'origine s'expriment en puissance moyenne sur le pas de temps demi-heure en MW.  
                 Or nous avons simplement somm√© ces valeurs pour chaque jour.  
                 Ainsi, pour obtenir les valeurs d'√©nergie en MWh il faut **multiplier** les valeurs de consommation et de production
                 de notre jeu de donn√©e par **0,5h** ''')    
       
if page == pages[1] : 
   st.subheader(partie2, divider='red')
   
   df_prod = df.groupby(by=['region']).agg({'thermique': sum,'nucleaire' : sum,'eolien' : sum,\
                                           'solaire': sum,'hydraulique' : sum,'pompage': sum,\
                                            'bioenergies' : sum,'ech.physiques':sum })
   df_prod_tot = df_prod.sum()
   df_prod_tot2 = df_prod_tot.drop("pompage",axis = 0)
   df_prod_tot3 = df_prod_tot2.drop("ech.physiques",axis = 0)
   chart_data = df_prod_tot3   
   with st.expander("Production (MW) par fili√®re "): 
        st.bar_chart(chart_data) 
        st.write("La fili√®re nucl√©aire est la source de production principale en France, suivie de l‚Äôhydraulique \
                  et du thermique.")   
     
    # Calcul de la production totale          
   dfx['Date']=pd.to_datetime(dfx['Date'])
   dfx['annee']=dfx['Date'].dt.year
   dfx['mois']= dfx['Date'].dt.month 
   prod_conso_mois = dfx.groupby("mois",'annee' == 2020).agg({'Consommation (MW)':'sum','Thermique (MW)' : "sum",\
                                                              'Nucl√©aire (MW)': "sum",'Eolien (MW)': "sum",'Solaire (MW)': "sum",\
                                                            'Hydraulique (MW)':"sum", 'Bio√©nergies (MW)':"sum" })           
   prod_tot = prod_conso_mois.drop('Consommation (MW)',axis = 1).sum(axis = 1)   
   df_prod_tot = pd.DataFrame(prod_tot) # Attention modifier nom de la colonne en vue du graphique      
   consol = prod_conso_mois.merge(df_prod_tot, on = 'mois', how = 'left')   
   consol = consol.rename({0 : 'Prod. tot.', 'Consommation (MW)' : "Conso.",
                           'Thermique (MW)': "Therm.",
                           'Nucl√©aire (MW)': 'Nucl.',
                          'Eolien (MW)': 'Eol.',
                          'Solaire (MW)':'Sol.',
                          'Hydraulique (MW)':'Hydrau.',
                         'Bio√©nergies (MW)': 'Bio√©n.'}, axis = 1)      
   with st.expander("√âvolution mensuelle de la consommation et de la production en France (ann√©e 2020)"):        
        st.write("Nous constatons que la production et la consommation suivent une m√™me tendance avec une production totale toujours l√©g√®rement sup√©rieure √† la consommation") 
        st.write(" L‚Äô√©cart entre le niveau de consommation et le niveau de production correspond au pompage \
               (stockage d'√©lectricit√©) et aux √©changes physiques (export de surplus de production)")
        lines_conso_fg = px.line(consol)
        lines_conso_fg.update_layout(yaxis_title='Energie √©lec (MW)')
        st.plotly_chart(lines_conso_fg)  
        st.markdown("*Notice : Cliquez sur les variables dans la l√©gende pour faire disparaitre ou apparaitre la s√©rie correspondante sur le graphique.*")
           
   
   dfx_group_by = dfx.groupby(by = 'R√©gion').agg({'Consommation (MW)': sum,
                                              'Thermique (MW)' : sum,
                                              'Nucl√©aire (MW)' : sum,
                                              'Eolien (MW)' : sum,
                                              'Solaire (MW)' : sum,
                                              'Hydraulique (MW)' : sum,'Bio√©nergies (MW)': sum})
   with st.expander("Consommation vs production par fili√®re pour chaque r√©gion"):       
       st.bar_chart(dfx_group_by)
       st.write("Nous observons par ce graphique que bien que la fili√®re nucl√©aire soit la premi√®re source \
                d‚Äô√©nergie en France, toutes les r√©gions ne disposent cependant pas de centrales nucl√©aires, \
                    ou n‚Äôont pas produit d‚Äô√©nergie nucl√©aire sur la p√©riode 2013-2020.")
       st.write("Les trois plus grands pourvoyeurs de cette fili√®re √©nerg√©tique sont les r√©gions Auvergne-Rh√¥ne-\
                Alpes, Grand Est et Centre-Val de Loire")
       st.write("La r√©gion √Æle-de-France consomme visiblement plus d‚Äô√©nergie que les autres r√©gions,  m√™me si \
                elle n‚Äôen produit quasiment pas; ")

       
   with st.expander("Implantation des √©nergies renouvelables"):     
       st.bar_chart(dfx_group_by[['Bio√©nergies (MW)', 'Solaire (MW)', 'Eolien (MW)']])
       st.write("Par ailleurs, en consid√©rant les √©nergies renouvelables comme √©tant la bio √©nergie, l‚Äô√©nergie \
                solaire et l‚Äô√©olien, on constate que l‚Äô√©nergie √©olienne est la plus pr√©sente et essentiellement\
                    dans les r√©gions Grand-Est et Hauts-de-France")
       st.write("L'√©nergie solaire arrive en deuxi√®me position et est essentiellement produite en Nouvelle-Aquitaine, \
                en Occitanie et en Provence-Alpes-C√¥tes d‚ÄôAzur.")

    
   df_filieres = df.iloc[:,10:19]
   df_num = df_filieres.select_dtypes('float')
   fig, ax = plt.subplots(figsize=(15,15))
   sns.heatmap(df_num.corr(), ax = ax, annot = True)    
   with st.expander("Corr√©lations entre la consommation et les fili√®res de production"): 
         st.write(fig)
         st.write("Notons une forte corr√©lation n√©gative entre la production nucl√©aire et les √©changes physiques. \
                Nous pouvons en d√©duire que les √©changes physiques viennent compenser les baisses de production \
                    nucl√©aire. La fili√®re nucl√©aire est corr√©l√©e positivement avec les fili√®res thermique \
                        et hydraulique ce aui est coh√©rent avec le poids de ces trois fili√®res dans la production\
                            fran√ßaise.") 
      
if page == pages[2] : 
   st.subheader(partie3, divider='violet')
   
   st.markdown("#### Analyse des corr√©lations entre consommations et productions journali√®res par fili√®re")
   st.markdown('''Cherchons la valeur des :green[coefficients de correlation (R)] par m√©thode statistique de :blue[**Spearman**].''')    
   with st.expander("$ \Large Afficher $") :        
       df_jours = df.groupby(by=[pd.Grouper(key='datetime', freq='D')]).agg({'consommation': 'sum', 'thermique': 'sum', 'nucleaire': 'sum', 'eolien': 'sum', 'solaire': 'sum', 'hydraulique': 'sum' })
       prod_cols = ['thermique', 'nucleaire', 'eolien', 'solaire','hydraulique']
       correlations = {}
       for col in prod_cols:
           r, p_value = spearmanr(df_jours.loc[:,'consommation'] , df_jours.loc[:,col] )
           correlations[col] = r
       correlations_df = pd.DataFrame.from_dict(data=correlations, orient='index', columns=['R'] ).reset_index()
       #st.dataframe(correlations_df) # affichage pour controle et debuggage
       figbar = px.bar(correlations_df, x='index', y='R', labels={'index':'fili√®re de production', 'y':'R'},
                 color='index')
       st.plotly_chart(figbar, theme=None , use_container_width = True)
       st.markdown('''On peut d√©gager deux tendances : c‚Äôest avec la production nucl√©aire que la consommation
        journali√®re est la plus fortement corr√©l√©e, tandis que cette m√™me consommation est
        faiblement corr√©l√©e n√©gativement avec la production solaire.  
        On pourrait expliquer ce dernier r√©sultat en se rappelant que la production solaire est la plus
        forte en milieu de journ√©e et en √©t√©, p√©riodes o√π les besoins en √©nergie domestiques et de
        chauffage sont les plus faibles.
        ''')         
   
   st.markdown("#### Analyse de la corr√©lation entre consommation mensuelle et mois de l'ann√©e")
   st.markdown('''Cherchons le :green[type de lien] entre ces deux variables par essais de r√©gression.  
               *Il y a 12 valeurs par mois correspondant √† chacune des 12 r√©gions m√©tropolitaines*.''')    
   with st.expander("$ \Large Afficher $") :    
       df_mois = df.groupby(by=[pd.Grouper(key='datetime', freq='M')]).agg({'num_mois': lambda x : x.unique()[0] , 'consommation': 'sum'})  
       fig = px.scatter(df_mois, x='num_mois', y='consommation', trendline="lowess")
       st.plotly_chart(fig, theme=None , use_container_width = True)
       st.markdown('''Nous trouvons qu'une r√©gression :green[**polynomiale d‚Äôordre 2**] mod√©lise le mieux cette relation''')
   
   st.markdown("#### Analyse de la corr√©lation entre consommations et temp√©rature, pour la r√©gion √Æle de France")
   with st.expander("$ \Large Afficher $") :         
       fig = px.scatter(df.loc[df.code_region==11], x='TMin', y='consommation', trendline="ols")
       st.plotly_chart(fig, theme=None , use_container_width = True)
       st.markdown('''Nous obtenons une relation approximativement :green[**lin√©raire d√©croissante**] entre ces deux variables. 
                   Le coefficient de d√©termination :green[**R est de 0,8**] (R¬≤ = 0,658) sur l'ensembles des valeurs de temp√©ratures.                     
                  Toutefois, l'on remarque que la relation est davantage lin√©aire depuis les temperatures n√©gatives
                  jusqu'√† environ 14¬∞c. :red[Pour T¬∞c > 14], la consommation remonte l√©g√©rement et :red[n'est pas bien mod√©lis√©e par cette droite]. On suppose une autre relation...''')        
       st.divider()
       st.markdown(''':rainbow[Mod√©lisez avec d'autres r√©gions :]''')
       region_selected = st.selectbox("", cn.liste_regions, index=0, placeholder="Selectionnez une r√©gion...")
       code_region_selected = df.loc[df['region']==region_selected, 'code_region'].unique()[0]
       user_fig = px.scatter(df.loc[df.code_region==code_region_selected], x='TMin', y='consommation', trendline="ols")
       st.plotly_chart(user_fig, theme=None , use_container_width = True)
                   